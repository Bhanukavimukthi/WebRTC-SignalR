@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client

<div class="videoboard">
    <video id="localVideo" class="video" autoplay muted></video>
    <video id="remoteVideo" class="video" autoplay></video>
    @*<button type="button" id="start" @onclick="Call">Start Video</button>*@
</div>

<div style="display: none">
<div class="connected-users">
    @*<em>Offer: @receivedRTCOffer</em>
        <em class="small">Answer: @receivedRTCAnswer</em>
        <button @onclick="JSmakeCall">Make call</button>
        <strong>@RTCOffer</strong>*@
    <h3>Group state</h3>
    <ul class="list-unstyled">
        @foreach (string message in groupMessages)
        {
            <li>@message</li>
        }
    </ul>
</div>

<nav class="navbar fixed-bottom navbar-dark bg-dark toolbarSignalR">
    <h3 class="navbar-brand">State</h3>
    <ul>
        <li>Connection State: <span>@HubConnection.State</span></li>
        <li>Connection ID: <span>@HubConnection.ConnectionId</span></li>
    </ul>
</nav>
</div>

@code {
    [CascadingParameter]
    public string RoomId { get; set; }

    HubConnection HubConnection;
    List<string> groupMessages = new List<string>();

    static Func<string, string, Task> sendIceCandidateFunc;

    protected override async Task OnInitializedAsync()
    {
        sendIceCandidateFunc = SendIceCandidateInvoke;

        await InitializeAndAddToHubAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("invoke_initWebRTC", RoomId);

        // Very important to not load this twice
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeGrid");
            await Call();
        }
    }


    async Task InitializeAndAddToHubAsync()
    {
        // Connection creation
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/webRTCHub"))
            .Build();

        HubConnection.On<string>("SendMessageToGroup", message => UpdateMessageGroup(message));
        HubConnection.On<string>("OfferReceived", async offer => await OnReceiveOffer(offer));
        HubConnection.On<string>("AnswerReceived", async answer => await OnAnswerReceived(answer));
        HubConnection.On<string>("IceCandidateReceived", async iceCandidate => await OnIceCandidateReceived(iceCandidate));

        // Connection start
        await HubConnection.StartAsync();

        // Adding the connection id to the group
        await HubConnection.SendAsync("AddToGroup", HubConnection.ConnectionId, RoomId);
    }

    void UpdateMessageGroup(string message)
    {
        groupMessages.Add(message);
        StateHasChanged();
    }

    async Task Call()
    {
        string offer = await JSRuntime.InvokeAsync<string>("invoke_createOffer");
        await HubConnection.SendAsync("SendOffer", offer, RoomId);
    }

    async Task OnReceiveOffer(string offer)
    {
        string answer = await JSRuntime.InvokeAsync<string>("invoke_onReceiveOffer", offer);
        await HubConnection.SendAsync("SendAnswer", answer, RoomId);
    }

    async Task OnAnswerReceived(string answer)
        => await JSRuntime.InvokeVoidAsync("invoke_onReceiveAnswer", answer);

    async Task OnIceCandidateReceived(string iceCandidate)
        => await JSRuntime.InvokeVoidAsync("invoke_onReceiveIceCandidate", iceCandidate);




    [JSInvokable]
    public static void SendIceCandidate(string iceCandidate, string roomId)
        => sendIceCandidateFunc.Invoke(iceCandidate, roomId);


    async Task SendIceCandidateInvoke(string iceCandidate, string roomId)
        => await HubConnection.SendAsync("SendIceCandidate", iceCandidate, RoomId);
}
