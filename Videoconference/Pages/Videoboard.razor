@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client

@if (videoconferenceManuallyClosed)
{
    <div class="centered-div">
        <h1>Thank you for participating</h1>
        <p>You didn't want to do that?</p>
        <button class="btn" @onclick="@(async () => await ReconnectAfterLeavingVideoconference())">Go back</button>
    </div>
}
else
{


    <div class="videoboard">
        <video id="localVideo" class="video" autoplay muted></video>
        @*<video id="remoteVideo" class="video" autoplay></video>*@
        @*<button type="button" id="start" @onclick="Call">Start Video</button>*@
    </div>

    <div class="toolbar-connectivity">
        <ul>
            <li><button class="btn" @onclick="ShareScreen"><span class="oi oi-monitor" aria-hidden="true"></span> Share your screen</button></li>
            <li><button class="btn"><span class="oi oi-camera-slr" aria-hidden="true"></span> Disable camera</button></li>
            <li><button class="btn"><span class="oi oi-microphone" aria-hidden="true"></span> Disable microphone</button></li>
            <li><button class="btn" @onclick="LeaveVideoconference"><span class="oi oi-circle-x" aria-hidden="true"></span> Quit the videoconference</button></li>
        </ul>
    </div>
    <div style="">
        <div class="connected-users">
            @*<em>Offer: @receivedRTCOffer</em>
                <em class="small">Answer: @receivedRTCAnswer</em>
                <button @onclick="JSmakeCall">Make call</button>
                <strong>@RTCOffer</strong>*@

            @*VERY IMPORTANT TO NOT LOAD THOSE 2 FUNCTIONS DIRECTLY, BUT REALLY AFTER AFTER AFTER EVERYRENDERING*@
            <button class="btn" @onclick="@(async () => await JSRuntime.InvokeVoidAsync("invokable_initClient", HubConnection.ConnectionId, RoomId))">Init</button>
            <button class="btn" @onclick="CallEveryone">CALL</button>
            <h3>Group state</h3>
            <ul class="list-unstyled">
                @foreach (ClientIds client in ClientsInRoom)
                {
                    <li>@client.UserName (roomId @client.RoomId)</li>
                }
                @foreach (string message in groupMessages)
                {
                    <li>@message</li>
                }
            </ul>
        </div>

        @*<nav class="navbar fixed-bottom navbar-dark bg-dark toolbarSignalR">
            <h3 class="navbar-brand">State</h3>
            <ul>
                <li>RoomID: @RoomId</li>
                <li>UserName: @UserName</li>
                <li>Connection State: <span>@HubConnection.State</span></li>
                <li>Connection ID: <span>@HubConnection.ConnectionId</span></li>
            </ul>
        </nav>*@
    </div>
}

@code {
    [Parameter]
    public string RoomId { get; set; }

    [Parameter]
    public string UserName { get; set; }

    HashSet<ClientIds> ClientsInRoom = new HashSet<ClientIds>();

    bool videoconferenceManuallyClosed = false;

    HubConnection HubConnection;
    List<string> groupMessages = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        SendIceCandidateFunc = SendIceCandidateInvoke;
        CallFunc = CallInvoke;
        ClientFixedFunc = ClientFixedInvoke;

        await InitializeAndAddToHubAsync();
    }

    bool clientHasBeenFixed = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!clientHasBeenFixed) await JSRuntime.InvokeVoidAsync("invokable_initClient", HubConnection.ConnectionId, RoomId);

        // Very important to not load this twice
        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("invokable_initializeGrid");


        }
        //await CallEveryone();
    }

    async Task InitializeAndAddToHubAsync()
    {
        // Connection creation
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/webRTCHub"))
            .WithAutomaticReconnect()
            .Build();

        ConfigureHubLifeCycle(HubConnection);

        ConfigureHubHandlers(HubConnection);

        await ConnectToHub(HubConnection);

        // Adding the connection id to the group
        await HubConnection.SendAsync("AddToGroup", RoomId, HubConnection.ConnectionId, UserName);
        await HubConnection.SendAsync("NotifyChangeInConnectedClientsInRoom", RoomId);
    }

    async Task ConnectToHub(HubConnection hubConnection)
    {
        // Try to start the connection with automatic reconnection
        System.Threading.CancellationTokenSource cts = new System.Threading.CancellationTokenSource();
        await HubHelpers.ConnectWithRetryAsync(hubConnection, cts.Token);
        cts.Dispose();
    }

    void ConfigureHubHandlers(HubConnection hubConnection)
    {
        HubConnection.On("NotificationChangeInConnectedClientsInRoom", () => UpdateListConnectedClientsInRoom());

        HubConnection.On<string>("SendMessageToGroup", message => UpdateMessageGroup(message));

        HubConnection.On<string, string>("OfferReceived", async (offer, clientOffering) => await OnReceiveOffer(offer, clientOffering));
        HubConnection.On<string, string>("AnswerReceived", async (answer, clientAnswering) => await OnAnswerReceived(answer, clientAnswering));
        //HubConnection.On<string, string>("IceCandidateReceived", async (iceCandidate, sender) => await OnIceCandidateReceived(iceCandidate, sender));
        HubConnection.On<string, string>("IceCandidateReceived", (iceCandidate, sender) => OnIceCandidateReceived(iceCandidate, sender));

    }


    void ConfigureHubLifeCycle(HubConnection hubConnection)
    {
        hubConnection.Reconnecting += error =>
        {
            Debug.Assert(HubConnection.State == HubConnectionState.Reconnecting);

            // Notify users the connection was lost and the client is reconnecting.
            // Start queuing or dropping messages.

            return Task.CompletedTask;
        };

        hubConnection.Reconnected += connectionId =>
        {
            Debug.Assert(HubConnection.State == HubConnectionState.Connected);

            // Notify users the connection was reestablished.
            // Start dequeuing messages queued while reconnecting if any.

            return Task.CompletedTask;
        };

        hubConnection.Closed += async error =>
        {
            Debug.Assert(hubConnection.State == HubConnectionState.Disconnected);

            // Notify users the connection has been closed or manually try to restart the connection.
            // Here should offer a modal to say goodbye with choice to rejoin again
            // NEED TO CLOSE VIDEO AND ALL
            await JSRuntime.InvokeVoidAsync("invoke_closeConnection");

            await Task.CompletedTask;
        };
    }

    async Task LeaveVideoconference()
    {
        videoconferenceManuallyClosed = true;
        await HubConnection.StopAsync();
    }

    async Task ReconnectAfterLeavingVideoconference()
    {
        videoconferenceManuallyClosed = false;
        await ConnectToHub(HubConnection);
    }

    void UpdateListConnectedClientsInRoom()
    {
        ClientsInRoom = HubHelpers.GetConnectedClientsInRoom(RoomId);
        StateHasChanged();
    }

    void UpdateMessageGroup(string message)
    {
        groupMessages.Add(message);
        StateHasChanged();
    }

    async Task CallEveryone()
    {
        string clientOffering;
        string clientAnswering;

        foreach (ClientIds client in ClientsInRoom)
        {
            if (client.ConnectionId != HubConnection.ConnectionId)
            {
                clientOffering = HubConnection.ConnectionId;
                clientAnswering = client.ConnectionId;

                //to initialize the peering object with the answering client id in it
                await JSRuntime.InvokeVoidAsync("invokable_createPeeringsForOfferingClient", clientAnswering);

                string offer = await JSRuntime.InvokeAsync<string>("invokable_createOffer", clientAnswering);
                await HubConnection.SendAsync("SendOffer", offer, clientOffering, clientAnswering);
            }
        }
    }

    async Task OnReceiveOffer(string offer, string clientOffering)
    {
        string answer = await JSRuntime.InvokeAsync<string>("invokable_createAnswer", offer, clientOffering);
        await HubConnection.SendAsync("SendAnswer", answer, clientOffering, HubConnection.ConnectionId);
    }

    async Task OnAnswerReceived(string answer, string clientAnswering)
        => await JSRuntime.InvokeVoidAsync("invokable_finalizePeering", answer, clientAnswering);

    //async Task OnIceCandidateReceived(string iceCandidate, string sender)
    //    => await JSRuntime.InvokeVoidAsync("invokable_onReceiveIceCandidate", iceCandidate, sender);


    async Task OnIceCandidateReceived(string iceCandidate, string sender)
    {
        //Console.WriteLine(iceCandidate + " et " + sender);
        await JSRuntime.InvokeVoidAsync("invokable_onReceiveIceCandidate", iceCandidate, sender);
    }

    [JSInvokable]
    public static void SendIceCandidate(string iceCandidate, string sender, string receiver)
    {
        SendIceCandidateFunc.Invoke(iceCandidate, sender, receiver);
    }

    static Func<string, string, string, Task> SendIceCandidateFunc;
    async Task SendIceCandidateInvoke(string iceCandidate, string sender, string receiver)
    {
        //determining who is the ICE sender
        if (sender == HubConnection.ConnectionId)
            await HubConnection.SendAsync("SendIceCandidate", iceCandidate, sender, receiver);
        else
            await HubConnection.SendAsync("SendIceCandidate", iceCandidate, receiver, sender);
    }


    [JSInvokable]
    public static void StartCall()
    {
        CallFunc.Invoke();
    }

    static Func<Task> CallFunc;
    async Task CallInvoke()
        => await CallEveryone();

    [JSInvokable]
    public static void ClientHasBeenFixed()
    {
        ClientFixedFunc.Invoke();
    }
    static Action ClientFixedFunc;
    void ClientFixedInvoke() => clientHasBeenFixed = true;


    async Task ShareScreen()
    {
        await JSRuntime.InvokeVoidAsync("invokable_shareScreen");
    }
}