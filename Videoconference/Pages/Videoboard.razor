@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client

@if (videoconferenceManuallyClosed)
{
    <div class="centered-div">
        <h1>Thank you for participating</h1>
        <p>You didn't want to do that?</p>
        <button class="btn" @onclick="@(async () => await ReconnectAfterLeavingVideoconference())">Go back</button>
    </div>
}
else
{
    <div class="videoboard">
        <video id="localVideo" class="video" autoplay muted></video>
        <video id="remoteVideo" class="video" autoplay></video>
        @*<button type="button" id="start" @onclick="Call">Start Video</button>*@
    </div>


    <div class="toolbar-connectivity">
        <ul>
            <li><button class="btn"><span class="oi oi-monitor" aria-hidden="true"></span> Share your screen</button></li>
            <li><button class="btn"><span class="oi oi-camera-slr" aria-hidden="true"></span> Disable camera</button></li>
            <li><button class="btn"><span class="oi oi-microphone" aria-hidden="true"></span> Disable microphone</button></li>
            <li><button class="btn" @onclick="LeaveVideoconference"><span class="oi oi-circle-x" aria-hidden="true"></span> Quit the videoconference</button></li>
        </ul>

    </div>
    <div style="">
        <div class="connected-users">
            @*<em>Offer: @receivedRTCOffer</em>
                <em class="small">Answer: @receivedRTCAnswer</em>
                <button @onclick="JSmakeCall">Make call</button>
                <strong>@RTCOffer</strong>*@
            <h3>Group state</h3>
            <ul class="list-unstyled">
                @foreach (string message in groupMessages)
                {
                    <li>@message</li>
                }
            </ul>
        </div>

        <nav class="navbar fixed-bottom navbar-dark bg-dark toolbarSignalR">
            <h3 class="navbar-brand">State</h3>
            <ul>
                <li>Connection State: <span>@HubConnection.State</span></li>
                <li>Connection ID: <span>@HubConnection.ConnectionId</span></li>
            </ul>
        </nav>
    </div>
}

@code {
    [CascadingParameter]
    public string RoomId { get; set; }

    bool videoconferenceManuallyClosed = false;


    HubConnection HubConnection;
    List<string> groupMessages = new List<string>();

    static Func<string, string, Task> sendIceCandidateFunc;

    protected override async Task OnInitializedAsync()
    {
        sendIceCandidateFunc = SendIceCandidateInvoke;

        await InitializeAndAddToHubAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("invoke_initWebRTC", RoomId);

        // Very important to not load this twice
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeGrid");
            await Call();
        }
    }

    async Task InitializeAndAddToHubAsync()
    {
        // Connection creation
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/webRTCHub"))
            .WithAutomaticReconnect()
            .Build();

        ConfigureHubLifeCycle(HubConnection);

        ConfigureHubHandlers(HubConnection);

        await ConnectToHub(HubConnection);

        // Adding the connection id to the group
        await HubConnection.SendAsync("AddToGroup", HubConnection.ConnectionId, RoomId);
    }

    async Task ConnectToHub(HubConnection hubConnection)
    {
        // Try to start the connection with automatic reconnection
        System.Threading.CancellationTokenSource cts = new System.Threading.CancellationTokenSource();
        await HubHelpers.ConnectWithRetryAsync(hubConnection, cts.Token);
        cts.Dispose();
    }

    void ConfigureHubHandlers(HubConnection hubConnection)
    {
        HubConnection.On<string>("SendMessageToGroup", message => UpdateMessageGroup(message));
        HubConnection.On<string>("OfferReceived", async offer => await OnReceiveOffer(offer));
        HubConnection.On<string>("AnswerReceived", async answer => await OnAnswerReceived(answer));
        HubConnection.On<string>("IceCandidateReceived", async iceCandidate => await OnIceCandidateReceived(iceCandidate));
    }

    string LOL = "nothing";
    void ConfigureHubLifeCycle(HubConnection hubConnection)
    {
        hubConnection.Reconnecting += error =>
        {
            Debug.Assert(HubConnection.State == HubConnectionState.Reconnecting);

            // Notify users the connection was lost and the client is reconnecting.
            // Start queuing or dropping messages.

            return Task.CompletedTask;
        };

        hubConnection.Reconnected += connectionId =>
        {
            Debug.Assert(HubConnection.State == HubConnectionState.Connected);

            // Notify users the connection was reestablished.
            // Start dequeuing messages queued while reconnecting if any.

            return Task.CompletedTask;
        };

        hubConnection.Closed += async error =>
        {
            Debug.Assert(hubConnection.State == HubConnectionState.Disconnected);

            // Notify users the connection has been closed or manually try to restart the connection.
            // Here should offer a modal to say goodbye with choice to rejoin again
            // NEED TO CLOSE VIDEO AND ALL
            await JSRuntime.InvokeVoidAsync("invoke_closeConnection");

            await Task.CompletedTask;
        };
    }

    async Task LeaveVideoconference()
    {
        videoconferenceManuallyClosed = true;
        await HubConnection.StopAsync();
    }

    async Task ReconnectAfterLeavingVideoconference()
    {
        videoconferenceManuallyClosed = false;
        await ConnectToHub(HubConnection);
    }

    void UpdateMessageGroup(string message)
    {
        groupMessages.Add(message);
        StateHasChanged();
    }

    async Task Call()
    {
        string offer = await JSRuntime.InvokeAsync<string>("invoke_createOffer");
        await HubConnection.SendAsync("SendOffer", offer, RoomId);
    }

    async Task OnReceiveOffer(string offer)
    {
        string answer = await JSRuntime.InvokeAsync<string>("invoke_onReceiveOffer", offer);
        await HubConnection.SendAsync("SendAnswer", answer, RoomId);
    }

    async Task OnAnswerReceived(string answer)
        => await JSRuntime.InvokeVoidAsync("invoke_onReceiveAnswer", answer);

    async Task OnIceCandidateReceived(string iceCandidate)
        => await JSRuntime.InvokeVoidAsync("invoke_onReceiveIceCandidate", iceCandidate);

    [JSInvokable]
    public static void SendIceCandidate(string iceCandidate, string roomId)
        => sendIceCandidateFunc.Invoke(iceCandidate, roomId);

    async Task SendIceCandidateInvoke(string iceCandidate, string roomId)
        => await HubConnection.SendAsync("SendIceCandidate", iceCandidate, RoomId);
}